apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: smoke-override-pdb
spec:
  bindings:
  - name: minio_user
    value: spark
  - name: minio_password
    value: sparkspark
  - name: minio_bucket
    value: spark-history
  - name: cluster_stopped
    value: false
  - name: cluster_paused
    value: false
  steps:
  - name: install minio
    try:
    - script:
        env:
          - name: NAMESPACE
            value: ($namespace)
          - name: MINIO_USER
            value: ($minio_user)
          - name: MINIO_PASSWORD
            value: ($minio_password)
        content: |
          envsubst < ../../setup/minio-secret.yaml | kubectl apply -f -
    - script:
        content: |
          bash ../../setup/minio-install.sh
  - name: install sparkhistoryserver
    try:
    # install sparkhistoryserver sparkhistoryserver, clusterOperation.stopped: false, clusterOperation.reconciliationPaused: false
    - apply:
        file: ../../setup/minio-s3-connection.yaml
    - apply:
        file: sparkhistoryserver.yaml
    - assert:
        bindings:
          - name: available_replicas
            value: 1
        file: sparkhistoryserver-assert.yaml
  - name: assert pdb
    try:
    - assert:
        timeout: 240s
        resource:
          kind: PodDisruptionBudget
          apiVersion: policy/v1
          metadata:
            name: test-sparkhistoryserver-node
            namespace: ($namespace)
          spec:
            maxUnavailable: 1
          status:
            expectedPods: 2
            currentHealthy: 2
            disruptionsAllowed: 1
  - name: assert podOverride
    try:
    - assert:
        file: sparkhistoryserver-assert.yaml
  - name: test env overrides
    try:
    - script:
        bindings:
        - name: NAMESPACE
          value: ($namespace)
        content: |
          #!/bin/bash
          kubectl -n $NAMESPACE get sts test-sparkhistoryserver-node-default -o yaml | yq -e '.spec.template.spec.containers[] | select (.name == "node") | .env[] | select (.name == "COMMON_VAR" and .value == "group-value")'
          kubectl -n $NAMESPACE get sts test-sparkhistoryserver-node-default -o yaml | yq -e '.spec.template.spec.containers[] | select (.name == "node") | .env[] | select (.name == "GROUP_VAR" and .value == "group-value")'
          kubectl -n $NAMESPACE get sts test-sparkhistoryserver-node-default -o yaml | yq -e '.spec.template.spec.containers[] | select (.name == "node") | .env[] | select (.name == "ROLE_VAR" and .value == "role-value")'
  - name: run spark example
    try:
    - sleep:
        duration: 240s
    - script:
        bindings:
        - name: NAMESPACE
          value: ($namespace)
        content: |
          #!/bin/bash
          set -x
          POD=$(kubectl -n $NAMESPACE get pods -l app.kubernetes.io/name=sparkhistoryserver --field-selector status.phase=Running -o jsonpath='{.items[0].metadata.name}')


          script=$(cat <<EOF
          export AWS_ACCESS_KEY_ID=\$(cat /kubedoop/secret/s3-credentials/ACCESS_KEY)
          export AWS_SECRET_ACCESS_KEY=\$(cat /kubedoop/secret/s3-credentials/SECRET_KEY)

          ./bin/spark-submit \
            --master local[*] \
            --deploy-mode client \
            --conf spark.eventLog.enabled=true \
            --conf spark.eventLog.dir=s3a://spark-history/events \
            --conf spark.hadoop.fs.s3a.endpoint=http://minio.$NAMESPACE.svc.cluster.local:9000 \
            --conf spark.hadoop.fs.s3a.path.style.access=true \
            --conf spark.hadoop.fs.s3a.connection.ssl.enabled=false \
            examples/src/main/python/pi.py 2
          EOF
          )

          kubectl -n $NAMESPACE exec $POD -- /bin/bash -c "$script"
  - name: verify history server
    try:
    - sleep:
        duration: 20s
    - script:
        bindings:
        - name: NAMESPACE
          value: ($namespace)
        content: |
          #!/bin/bash
          POD=$(kubectl -n $NAMESPACE get pods -l app.kubernetes.io/name=sparkhistoryserver --field-selector status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          # Wait for the application to appear in history server
          for i in {1..30}; do
            APPS=$(kubectl -n $NAMESPACE exec $POD -- curl -s http://localhost:18080/api/v1/applications)
            echo "Found applications in history server:"
            echo $APPS
            if [ $(echo $APPS | jq length) -gt 0 ]; then
              echo "Found application in history server"
              exit 0
            fi
            echo "Waiting for application to appear in history server..."
            sleep 5
          done
          echo "Timeout waiting for application in history server"
          exit 1
    catch:
      - script:
          content: |
            #!/bin/bash
            kubectl -n $NAMESPACE describe pods
