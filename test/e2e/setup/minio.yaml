# Use minio as a lightweight S3-compatible object storage for testing purposes.
# Minio all environment variables can be found at: https://github.com/minio/minio/discussions/16298
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-admin-credentials
stringData:
  MINIO_ROOT_USER: minioadmin
  MINIO_ROOT_PASSWORD: minioadmin
---
apiVersion: v1
kind: Secret
metadata:
  name: spark-minio-credentials
  labels:
    secrets.kubedoop.dev/class: s3-credentials  # used by secret class
type: Opaque
stringData:
  ACCESS_KEY: ($SPARK_MINIO_USER)
  SECRET_KEY: ($SPARK_MINIO_PASSWORD)
  BUCKET: ($SPARK_MINIO_BUCKET)
  PREFIX_PATH: events/  # optional prefix path within the bucket
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-minio-policy
data:
  spark-minio-policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:ListBucket",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::${BUCKET}",
            "arn:aws:s3:::${BUCKET}/*"
          ]
        }
      ]
    }

---
apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: web
  selector:
    app: minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
spec:
  selector:
    matchLabels:
      app: minio
  serviceName: minio
  replicas: 1
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: quay.io/minio/minio:RELEASE.2025-07-23T15-54-02Z
        envFrom:
        - secretRef:
            name: minio-admin-credentials
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        ports:
        - containerPort: 9001
          name: web
        - containerPort: 9000
          name: api
        volumeMounts:
        - name: data
          mountPath: /data
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: data
        emptyDir: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: prepare-policy
        image: quay.io/rockylinux/rockylinux:9-ubi-init
        envFrom:
        - secretRef:
            name: spark-minio-credentials
        command:
        - /bin/sh
        - -c
        - |
          set -ex
          # Substitute environment variables in the policy template and output to /data
          sed -e "s|\${BUCKET}|$BUCKET|g" /config/spark-minio-policy.json > /data/spark-minio-policy.json
        volumeMounts:
        - name: config
          mountPath: /config
        - name: data
          mountPath: /data
      containers:
      - name: minio-init
        image: quay.io/minio/minio:RELEASE.2025-07-23T15-54-02Z
        envFrom:
        - secretRef:
            name: spark-minio-credentials
        - secretRef:
            name: minio-admin-credentials
        command:
        - /bin/sh
        - -c
        - |
          set -ex
          # Wait for Minio to be ready by repeatedly trying to set an alias
          until mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
            echo "Waiting for Minio..."
            sleep 5
          done

          # Create a new user if it doesn't exist
          mc admin user add myminio $ACCESS_KEY $SECRET_KEY || echo "User $ACCESS_KEY already exists"

          # Create a bucket named 'spark' if it doesn't exist
          mc mb myminio/$BUCKET/$PREFIX_PATH || echo "Bucket $BUCKET already exists"

          # Set the policy for the 'spark' bucket
          mc admin policy create myminio spark-minio-policy /data/spark-minio-policy.json
          mc admin policy attach myminio spark-minio-policy --user $ACCESS_KEY
          echo "Minio initialized successfully."
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: config
        configMap:
          name: spark-minio-policy
      - name: data
        emptyDir: {}
  backoffLimit: 4
